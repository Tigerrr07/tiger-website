"use strict";(self.webpackChunktiger_website=self.webpackChunktiger_website||[]).push([[8296],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>s});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(r),s=a,m=p["".concat(c,".").concat(s)]||p[s]||g[s]||l;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function s(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},38:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const l={},i="Lecture3 Kernel-Based Data Parallel Execution Model",o={unversionedId:"ECE408/Lecture3",id:"ECE408/Lecture3",title:"Lecture3 Kernel-Based Data Parallel Execution Model",description:"Objective",source:"@site/docs/ECE408/Lecture3.md",sourceDirName:"ECE408",slug:"/ECE408/Lecture3",permalink:"/tiger-website/docs/ECE408/Lecture3",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CUDA course",permalink:"/tiger-website/docs/category/cuda-course"}},c={},u=[{value:"Objective",id:"objective",level:2},{value:"Example 1 : 1D VecAdd",id:"example-1--1d-vecadd",level:2},{value:"Example 2 : Color Image to gray Image",id:"example-2--color-image-to-gray-image",level:2},{value:"RGBtoGrayImage Kernel",id:"rgbtograyimage-kernel",level:3},{value:"Example 3 : Image Blurring",id:"example-3--image-blurring",level:2},{value:"Image Blur Kernel",id:"image-blur-kernel",level:3}],d={toc:u};function g(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lecture3-kernel-based-data-parallel-execution-model"},"Lecture3 Kernel-Based Data Parallel Execution Model"),(0,a.kt)("h2",{id:"objective"},"Objective"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Muti-dimensional logical organization of CUDA threads"),(0,a.kt)("li",{parentName:"ul"},"Use control structures, such as loops in a kernel"),(0,a.kt)("li",{parentName:"ul"},"Concepts of thread scheduling, latency tolerance, and hardware occupancy")),(0,a.kt)("h2",{id:"example-1--1d-vecadd"},"Example 1 : 1D VecAdd"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Thread Assgiment")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"N = 1000, block size = 256"),(0,a.kt)("li",{parentName:"ul"},"One element per thread")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"vector add 1",src:r(4658).Z,width:"965",height:"410"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// one element per thread\n__global__ void vecAdd(float *A, float* B, float* C, int n) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < n)\n        C[i] = A[i] + B[i];\n}\n\ndim3 dimGrid(std::ceil(n / 256), 1, 1);\ndim3 dimBlock(256, 1, 1);\n\nvecAdd<<<dimGrid, dimBlock>>>(A, B, C, n); // device variables\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Coarser grains : two elements per thread")),(0,a.kt)("p",null,"![](vx_images/162643316226847.png =500x) ![](vx_images/350303416247013.png =500x)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Coarser Grains : two element per thread\nint i = blockIdx.x * (2 * blockDim.x) + threadIdx.x;\nif (i < n)\n    C[i] = A[i] + B[i];\ni += blockDim.x;\nif (i < n)\n    C[i] = A[i] + B[i];\n    \n")),(0,a.kt)("h2",{id:"example-2--color-image-to-gray-image"},"Example 2 : Color Image to gray Image"),(0,a.kt)("p",null,"Convert color image to a gray-scale image"),(0,a.kt)("p",null,"![](vx_images/300003616239682.png =550x)"),(0,a.kt)("p",null,"Row-major layout of 2D arrays in C/C++"),(0,a.kt)("p",null,"![](vx_images/197833716236237.png =500x)"),(0,a.kt)("h3",{id:"rgbtograyimage-kernel"},"RGBtoGrayImage Kernel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// RGB2gray\n__global__ void RGB2gray(unsigned char* grayImage, unsigned char* rgbImage, int Width, int Height) {\n    int Col = blockIdx.x * blockDim.x + threaIdx.x;\n    int Row = blockIdx.y * blockDim.y + threaIdx.y;\n    \n    if (Row < Height && Col < Width) {\n        int grayOffset = Row * Width + Col;\n        \n        int rgbOffset = 3 * grayoffset;\n        unsigned char r = rgbImage[rgbOffset];\n        unsigned char g = rgbImage[rgbOffset + 1];\n        unsigned char b = rgbImage[rgbOffset + 2];\n        \n        grayImage[grayOffset] = 0.21f * r + 0.71f * g + 0.07f * b;\n    }\n}\n\n")),(0,a.kt)("h2",{id:"example-3--image-blurring"},"Example 3 : Image Blurring"),(0,a.kt)("p",null,"Each output is the average of pixels around it (BLUR_SIZE = 1)\n![](vx_images/502844016231991.png =500x)"),(0,a.kt)("h3",{id:"image-blur-kernel"},"Image Blur Kernel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Imgae Blur\n#define BLUR_SIZE 1\n__global__ void(unsigned char* in, unsigned char* out, int width, int height) {\n    int col = blockIdx.x * blockDim.x + threaIdx.x;\n    int row = blockIdx.y * blockDim.y + threaIdx.y;\n    \n    if (row < height && col < width) {\n        int pixVal = 0;\n        int pixels = 0;\n        \n        // Get the average of the surrounding BLUR_SIZE x BLUR_SIZE box\n        for (int blurRow = - BLUR_SIZE; i <= BLUR_SIZE; blurRow++) {\n            for (int blurCol = - BLUR_SIZE; i <= BLUR_SIZE; blurCol++) {\n                int curRow = row + blurRow;\n                int curCol = col + blurCol;\n                \n                // Verify we have a valid image pixel\n                if (curRow >= 0 && curRow < height && curCol >= 0 && curCol < Width) {\n                    pixVal += in[curRow * Width + curCol];\n                    pixels++;\n                } \n            }\n        }\n    }\n}\n")))}g.isMDXComponent=!0},4658:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/vecadd1-4b0b4c6b4d695dbd08efd09be978e925.png"}}]);