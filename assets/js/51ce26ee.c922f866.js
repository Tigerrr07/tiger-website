"use strict";(self.webpackChunktiger_website=self.webpackChunktiger_website||[]).push([[3258],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),d=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=d(r),p=n,k=s["".concat(c,".").concat(p)]||s[p]||m[p]||i;return r?a.createElement(k,l(l({ref:t},u),{},{components:r})):a.createElement(k,l({ref:t},u))}));function p(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var d=2;d<i;d++)l[d]=r[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},3756:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const i={},l=void 0,o={unversionedId:"ECE408/Lecture1&2",id:"ECE408/Lecture1&2",title:"Lecture1&2",description:"Q: \u5728CUDA\u4e2d\uff0c\u4ec0\u4e48\u662fkernles?",source:"@site/docs/ECE408/Lecture1&2.md",sourceDirName:"ECE408",slug:"/ECE408/Lecture1&2",permalink:"/tiger-website/docs/ECE408/Lecture1&2",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CUDA course",permalink:"/tiger-website/docs/category/cuda-course"},next:{title:"Lecture3 Kernel-Based Data Parallel Execution Model",permalink:"/tiger-website/docs/ECE408/Lecture3"}},c={},d=[{value:"Programming Model for CUDA",id:"programming-model-for-cuda",level:2},{value:"Thread Hierarchy",id:"thread-hierarchy",level:3},{value:"gridDim",id:"griddim",level:3},{value:"blockDim",id:"blockdim",level:3}],u={toc:d};function m(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Q: \u5728CUDA\u4e2d\uff0c\u4ec0\u4e48\u662fkernles?\nA: kernels \u7c7b\u4f3c\u4e8e C++ \u4e2d functions\uff0c\u5f53\u8c03\u7528\u5b83\u65f6\uff0c\u4f1a\u88ab\u5e76\u884c\u7684\u6267\u884c\u591a\u6b21\u3002"),(0,n.kt)("h2",{id:"programming-model-for-cuda"},"Programming Model for CUDA"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each CUDA kernel",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"is executed by ",(0,n.kt)("strong",{parentName:"li"},"a grid")),(0,n.kt)("li",{parentName:"ul"},"grid is a 3D array of ",(0,n.kt)("strong",{parentName:"li"},"thread blocks"),", which are 3D arrays of ",(0,n.kt)("strong",{parentName:"li"},"threads")))),(0,n.kt)("li",{parentName:"ul"},"Each thread",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"executes the ",(0,n.kt)("strong",{parentName:"li"},"same program")," on ",(0,n.kt)("strong",{parentName:"li"},"distinct data address")),(0,n.kt)("li",{parentName:"ul"},"has a ",(0,n.kt)("strong",{parentName:"li"},"unique identifier")," to compute memory addresses and make control decision"),(0,n.kt)("li",{parentName:"ul"},"Single Program Multiple Data (SPMD)")))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"grid",src:r(1087).Z,width:"902",height:"400"})),(0,n.kt)("h3",{id:"thread-hierarchy"},"Thread Hierarchy"),(0,n.kt)("h3",{id:"griddim"},"gridDim"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"gridDim gives number of blocks",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Number of blocks in each dimension is"),(0,n.kt)("li",{parentName:"ul"},"gridDim.x = 8, gridDim.y = 3, gridDim.z = 2"))),(0,n.kt)("li",{parentName:"ul"},"Each block has a unique index tuple",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"blockIdx.x : ","[0, griDim.x-1]"),(0,n.kt)("li",{parentName:"ul"},"blockIdx.y : ","[0, griDim.y-1]"),(0,n.kt)("li",{parentName:"ul"},"blockIdx.z : ","[0, griDim.z-1]")))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"gridDim",src:r(2848).Z,width:"903",height:"330"})),(0,n.kt)("h3",{id:"blockdim"},"blockDim"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"blockDim gives number of threads",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Number of blocks in each dimension is"),(0,n.kt)("li",{parentName:"ul"},"blockDim.x = 5, blockDim.y = 4, blockDim.z = 3"))),(0,n.kt)("li",{parentName:"ul"},"Each thread has a unique index tuple",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"threadIdx.x : ","[0, blockDim.x-1]"),(0,n.kt)("li",{parentName:"ul"},"threadIdx.y : ","[0, blockDim.y-1]"),(0,n.kt)("li",{parentName:"ul"},"threadIdx.z : ","[0, blockDim.z-1]")))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"blockDim",src:r(6755).Z,width:"1392",height:"419"})),(0,n.kt)("p",null,"\u6bcf\u4e2a threadIdx \u5728\u5b83\u7684 block \u4e2d\u662f\u552f\u4e00\u7684\uff0cthreadIdx \u52a0\u4e0a blockIdx \u5728 grid \u4e2d\u662f\u552f\u4e00\u7684\u3002"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"threadBlocks",src:r(7645).Z,width:"1298",height:"473"}),"\n\u4e0a\u9762 vector add \u7684\u4f8b\u5b50\u4e2d block \u548c grid \u5747\u662f\u4e00\u7ef4\u7684\uff0c\u5219\u53ef\u4ee5\u7528\u4e0b\u9762\u516c\u5f0f\u8ba1\u7b97\u8be5\u7ebf\u7a0b\u5728 grid \u4e2d\u7684\u552f\u4e00\u7f16\u53f7\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"int tid = blockIdx.x * blockDim.x + threadIdx.x;\n")),(0,n.kt)("p",null,"Q: \u4e3a\u4ec0\u4e48 thread blocks \u548c thread \u8fd9\u6837\u7ec4\u7ec7\uff1f\nA: \u7b80\u5316\u5904\u7406\u9ad8\u7ef4\u6570\u636e\u65f6\u7684\u5185\u5b58\u5bfb\u5740\uff0c\u4f8b\u5982 Image Processing, Vectors, matrices, tensors."))}m.isMDXComponent=!0},6755:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/blockDim-ef28a73b1a42bb1ef7106fec8e1e175b.png"},1087:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/grid-3dbc9f86692ed8f966f3913406912dd8.png"},2848:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/gridDim-420eb5bea1ac22b56007b942cc4c7d2f.png"},7645:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/oneDthreadBlocks-fa378e9343b0e735b867d834e96bd6a9.png"}}]);